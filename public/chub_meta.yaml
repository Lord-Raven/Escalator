# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Escalator"

# A short tagline to show in search.
tagline: "Introduce escalating scenarios through lorebook triggers."

creator_notes: "
**What It Does**<br>
This stage introduces escalating keywords that could be incorporated into a lorebook entries to create scenarios or definitions that evolve over time. 
With every player input, an escalation value is increased (by a configurable 'pacing' value), and a hidden tag is prepended to the user's input, containing the current escalation level (e.g., \"Escalation1\").<br>
<br>
By adding these levels as lorebook keywords, different entries can be included in the prompt based on how long the chat has been going, allowing creators to deliberately craft developing scenarios that maybe have a shot at staying on track.<br>
<br>
For reference, at the default pace, each user input equates to half of an escalation level. All tags are in whole levels, so at the default pace, if you want a lorebook entry to trigger for the first 9 responses, you would add the keywords \"Escalation0,Escalation1,Escalation2,Escalation3,Escalation4\"
<br>
Because this explanation sucks, please check out the character book on [Elise Moreau](https://venus.chub.ai/characters/Ravenok/elise-moreau-e05bd9d34a01); she has this stage attached with the default pacing and a maximum escalation level that matches the highest level on her lorebook entries.<br>
<br>
Ultimately, this is very similar to my [Alien Infestation Stage](https://venus.chub.ai/extensions/Ravenok/alien-infestation-04c7448f1d14), but trying to expose the concept of scenario escalation in a generalized way that others can hook into through lorebooks.<br>
<br>
**Pitfalls**<br>
The stage's current approach is unfortunately based on modifying the user's input before submission to the LLM; I had hoped to leverage the stage directions feature, because that element is sent to the LLM without being persisted to the database (or future prompts), 
but it seems that stage directions are not interrogated for lorebook triggers at this time.<br>
<br>
The stage directions would be more transparent, and would allow only the most recent escalation tag to be included in the prompt. Instead, we have a big downside to deal with: 
modifying the user's input means that there are multiple past escalation tags in each prompt, so our lorebook entries have to reduce lorebook scanning depth or exclude a few escalation tags beyond the lorebook entry's own level. Otherwise, we risk triggering multiple conflicting lorebook entries.<br>
<br>
Not only does this make for more complicated lorebook setup, it hamstrings the ability to have escalating entries for specific elements of your setting; if the king is slowly dying and his entry says he's on his deathbed for escalation10-15, 
a separate king entry for escalation16-on where the king is actually dead could overlap with deathbed entries, because the past keywords may still be within the scanned depth, and we need the selective AND to handle \"king\" and the escalation keyword.<br>
<br>
I have tried to solve for this issue in other ways, but I think my hands are tied at the moment. If anyone can think up another approach to keep only a single tag in-prompt at a time, though, let me know.<br>
<br>
**Configuration**<br>
You can tweak a couple of the stage's behaviors:<br>
* Pacing: sets the rate of escalation in the scenario, so players can tune the burn to their taste.<br>
* Maximum Escalation: This is the final level where the stage will stop escalating. This is relevant if there is a final scenario entry in your lorebook that you want to continually trigger once the 'end' has been reached.
"


# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'UNLISTED'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'NONE'

# Self-explanatory.
tags:
  - 'Stage'
  - 'Extension'
  - 'Utility'
  - 'Lorebook'

# The schema of any user-supplied config.
# If your stage requires a configuration but has no
#   defined schema, it won't work.
config_schema:
  title: Escalator Settings
  type: object
  properties:
    pacing:
      title: Pacing
      description: Relative rate of escalation.
      type: string
      default: "Deliberate"
      enum: ["Glacial", "Plodding", "Deliberate", "Brisk", "Rapid"]
    characterBook:
      title: Character Book
      description: A character to borrow the lorebook for.
    maxEscalation:
      title: Maximum Escalation
      description: The ultimate escalation value for the scenario.
      type: number
      default: 10
    

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.


github_path: 'https://github.com/Lord-Raven/Escalator'


extension_id: 'escalator-b5fa45b644a0'

